"use strict";

//# Managing workout data: Creating
class Workout {
  date = new Date();
  // to make unique ids, take the last 10 chars of Date
  id = String(Date.now()).slice(-10);
  clicks = 0;

  constructor(coords, distance, duration) {
    this.coords = coords; // [lat, lng]
    this.distance = distance; // in km
    this.duration = duration; // in min
  }

  _setDescription() {
    const months = [
      "January",
      "February",
      "March",
      "April",
      "May",
      "June",
      "July",
      "August",
      "September",
      "October",
      "November",
      "December",
    ];

    this.description = `${this.type[0].toUpperCase()}${this.type.slice(1)} on ${
      months[this.date.getMonth()]
    } ${this.date.getDate()}`;
  }

  click() {
    this.clicks++;
  }
}

//# Running child class of Workout
class Running extends Workout {
  type = "running";

  constructor(coords, distance, duration, cadence) {
    super(coords, distance, duration);
    this.cadence = cadence;
    // calling right away these methods
    this.calcPace();
    this._setDescription();
  }

  calcPace() {
    // min / km
    this.pace = this.duration / this.distance;
    return this.pace;
  }
}

//# Cycling child class of Workout
class Cycling extends Workout {
  type = "cycling";

  constructor(coords, distance, duration, elevationGain) {
    super(coords, distance, duration);
    this.elevationGain = elevationGain;
    // calling right away these methods
    this.calcSpeed();
    this._setDescription();
  }

  calcSpeed() {
    // km/h
    this.speed = this.distance / (this.duration / 60);
    return this.speed;
  }
}

//# Testing the child classes
// const run1 = new Running([39, -12], 5.2, 24, 178);
// const cycle1 = new Cycling([39, -12], 27, 95, 523);
// console.log(run1);
// console.log(cycle1);

/////////////////////////////////////////////////////////////////////////////

const form = document.querySelector(".form");
const containerWorkouts = document.querySelector(".workouts");
const inputType = document.querySelector(".form__input--type");
const inputDistance = document.querySelector(".form__input--distance");
const inputDuration = document.querySelector(".form__input--duration");
const inputCadence = document.querySelector(".form__input--cadence");
const inputElevation = document.querySelector(".form__input--elevation");

//# Application Architecture
class App {
  #map;
  #mapZoomLevel = 13;
  #mapEvent;
  #workouts = [];

  constructor() {
    // will be called right away when the page loads, user's position
    this.#getPosition();

    // get data from local storage
    this.#getLocalStorage();

    // event for submitting
    form.addEventListener("submit", this.#newWorkout.bind(this));

    // event for change in option choice
    inputType.addEventListener("change", this.#toggleElevationField);

    // event for moving to popup by clicking
    containerWorkouts.addEventListener("click", this.#moveToPopup.bind(this));
  }

  clearInputs() {
    inputDistance.value = "";
    inputDuration.value = "";
    inputCadence.value = "";
    inputElevation.value = "";
  }

  #getPosition() {
    // Implementing geo-location API
    //? accepts 2 parameters: success and error functions
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        this.#loadMap.bind(this),
        function () {
          // error
          alert(`Could not get the current location üó∫Ô∏è`);
        }
      );
    }
  }

  #loadMap(position) {
    // success
    const { latitude } = position.coords;
    const { longitude } = position.coords;
    console.log(
      `https://www.google.com/maps/@${latitude},${longitude},15.5z?entry=ttu`
    );

    //# Implementing Leaflet library
    const coords = [latitude, longitude];
    //? 2nd param in "setView" is the zoom, "map" is special object generated by Leaflet
    this.#map = L.map("map").setView(coords, this.#mapZoomLevel);
    // console.log(map);

    L.tileLayer("https://tile.openstreetmap.org/{z}/{x}/{y}.png", {
      attribution:
        '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
    }).addTo(this.#map);

    //? event handler for pointing on the map, ".on()" comes from Leaflet
    //? mapE = event, handling clicks on the map
    this.#map.on("click", this.#showForm.bind(this));

    // render the markers after the map loads
    this.#workouts.forEach((work) => {
      this.#renderWorkoutMarker(work);
    });
  }

  #showForm(mapE) {
    this.#mapEvent = mapE;
    form.classList.remove("hidden");
    inputDistance.focus();
  }

  #hideForm() {
    // Clear inputs
    this.clearInputs();
    // hide form
    form.style.display = "none";
    form.classList.add("hidden");
    setTimeout(() => {
      form.style.display = "grid";
    }, 1000);
  }

  #toggleElevationField() {
    inputElevation.closest(".form__row").classList.toggle("form__row--hidden");
    inputCadence.closest(".form__row").classList.toggle("form__row--hidden");
  }

  #newWorkout(e) {
    // checks if input is number
    const validInputs = (...inputs) =>
      inputs.every((inp) => Number.isFinite(inp));
    // checks if input is greater than 0
    const allPositive = (...inputs) => inputs.every((inp) => inp > 0);

    e.preventDefault();

    // Get data from form
    const type = inputType.value;
    const distance = Number(inputDistance.value);
    const duration = Number(inputDuration.value);
    const { lat, lng } = this.#mapEvent.latlng;
    let workout;

    // If workout running, create running object
    if (type === "running") {
      const cadence = Number(inputCadence.value);

      // Check if data is valid
      if (
        //* !Number.isFinite(distance) ||
        //* !Number.isFinite(duration) ||
        //* !Number.isFinite(cadence)

        !validInputs(distance, duration, cadence) ||
        !allPositive(distance, duration, cadence)
      ) {
        return alert(`Inputs have to be positive numbers`);
      }

      workout = new Running([lat, lng], distance, duration, cadence);
    }

    // If workout cycling running, create cycling running object
    if (type === "cycling") {
      const elevation = Number(inputElevation.value);

      // Check if data is valid
      if (
        !validInputs(distance, duration, elevation) ||
        !allPositive(distance, duration)
      ) {
        return alert(`Inputs have to be positive numbers`);
      }

      workout = new Cycling([lat, lng], distance, duration, elevation);
    }

    // Add new object to workout array
    this.#workouts.push(workout);
    // console.log(workout);

    // Render workout on map as marker
    this.#renderWorkoutMarker(workout);

    // Render workout on list
    this.#renderWorkout(workout);

    // Hide form + Clear input fields
    // this.clearInputs();
    this.#hideForm();

    // set local storage to all workouts
    this.#setLocalStorage();
  }

  #renderWorkoutMarker(workout) {
    //? ".marker" creates; ".addTo" adds to the map; ".bindPopup" creates&binds a popup to the ".marker";
    L.marker(workout.coords)
      .addTo(this.#map)
      .bindPopup(
        L.popup({
          maxWidth: 250,
          minWidth: 100,
          autoClose: false,
          closeOnClick: false,
          className: `${workout.type}-popup`,
        })
      )
      .setPopupContent(
        `${workout.type === "running" ? "üèÉ‚Äç‚ôÇÔ∏è" : "üö¥‚Äç‚ôÄÔ∏è"} ${workout.description}`
      )
      .openPopup();
  }

  #renderWorkout(workout) {
    let html = `
      <li class="workout workout--${workout.type}" data-id="${workout.id}">
        <h2 class="workout__title">${workout.description}</h2>
        <div class="workout__details">
          <span class="workout__icon">${
            workout.type === "running" ? "üèÉ‚Äç‚ôÇÔ∏è" : "üö¥‚Äç‚ôÄÔ∏è"
          }</span>
          <span class="workout__value">${workout.distance}</span>
          <span class="workout__unit">km</span>
        </div>
        <div class="workout__details">
          <span class="workout__icon">'‚è±Ô∏è'</span>
          <span class="workout__value">${workout.duration}</span>
          <span class="workout__unit">min</span>
        </div>
    `;

    if (workout.type === "running") {
      html += `
        <div class="workout__details">
          <span class="workout__icon">'‚ö°Ô∏è'</span>
          <span class="workout__value">${workout.pace.toFixed(1)}</span>
          <span class="workout__unit">km/min</span>
        </div>
        <div class="workout__details">
          <span class="workout__icon">'ü¶∂üèº'</span>
          <span class="workout__value">${workout.cadence}</span>
          <span class="workout__unit">spm</span>
        </div>
      </li>
      `;
    }

    if (workout.type === "cycling") {
      html += `
        <div class="workout__details">
          <span class="workout__icon">'‚ö°Ô∏è'</span>
          <span class="workout__value">${workout.speed.toFixed(1)}</span>
          <span class="workout__unit">km/h</span>
        </div>
        <div class="workout__details">
          <span class="workout__icon">'üèîÔ∏è'</span>
          <span class="workout__value">${workout.elevationGain}</span>
          <span class="workout__unit">m</span>
        </div>
      </li>
      `;
    }

    form.insertAdjacentHTML("afterend", html);
  }

  #moveToPopup(e) {
    const workoutEl = e.target.closest(".workout");
    // console.log(workoutEl);

    if (!workoutEl) {
      return;
    }

    const workout = this.#workouts.find(
      (work) => work.id === workoutEl.dataset.id
    );
    // console.log(workout);

    // Leaflet method
    this.#map.setView(workout.coords, this.#mapZoomLevel, {
      animate: true,
      pan: {
        duration: 1,
      },
    });

    // using the public interface
    // workout.click();
  }

  // setting local storage
  #setLocalStorage() {
    // local storage is simple API, and better for small amount of data
    // accepts 2 params, 1st is key and 2nd is value
    localStorage.setItem("workouts", JSON.stringify(this.#workouts));
  }

  // retrieving data from local storage
  #getLocalStorage() {
    const data = JSON.parse(localStorage.getItem("workouts"));
    // console.log(data);

    if (!data) {
      return;
    }

    // restore the data
    this.#workouts = data;

    // render these saved data
    this.#workouts.forEach((work) => {
      this.#renderWorkout(work);
    });
  }

  // deleting data from local storage
  reset() {
    localStorage.removeItem("workouts");
    // location - a big object with different methods in the browser
    location.reload();
  }
}

// creating the object for App class
const app = new App();
