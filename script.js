"use strict";

const months = [
  "January",
  "February",
  "March",
  "April",
  "May",
  "June",
  "July",
  "August",
  "September",
  "October",
  "November",
  "December",
];

const form = document.querySelector(".form");
const containerWorkouts = document.querySelector(".workouts");
const inputType = document.querySelector(".form__input--type");
const inputDistance = document.querySelector(".form__input--distance");
const inputDuration = document.querySelector(".form__input--duration");
const inputCadence = document.querySelector(".form__input--cadence");
const inputElevation = document.querySelector(".form__input--elevation");

//# Managing workout data: Creating
class Workout {
  date = new Date();
  // to make unique ids, take the last 10 chars of Date
  id = String(Date.now()).slice(-10);

  constructor(coords, distance, duration) {
    this.coords = coords; // [lat, lng]
    this.distance = distance; // in km
    this.duration = duration; // in min
  }
}

//# Running child class of Workout
class Running extends Workout {
  constructor(coords, distance, duration, cadence) {
    super(coords, distance, duration);
    this.cadence = cadence;
    // calling right away this method
    this.calcPace();
  }

  calcPace() {
    // min / km
    this.pace = this.duration / this.distance;
    return this.pace;
  }
}

//# Cycling child class of Workout
class Cycling extends Workout {
  constructor(coords, distance, duration, elevationGain) {
    super(coords, distance, duration);
    this.elevationGain = elevationGain;
    // calling right away this method
    this.calcSpeed();
  }

  calcSpeed() {
    // km/h
    this.speed = this.distance / (this.duration / 60);
    return this.speed;
  }
}

//# Testing the child classes
// const run1 = new Running([39, -12], 5.2, 24, 178);
// const cycle1 = new Cycling([39, -12], 27, 95, 523);
// console.log(run1);
// console.log(cycle1);

/////////////////////////////////////////////////////////////////////////////

//# Application Architecture
class App {
  #map;
  #mapEvent;

  constructor() {
    // will be called right away when the page loads
    this.#getPosition();

    // event for submitting
    form.addEventListener("submit", this.#newWorkout.bind(this));

    // event for change in option choice
    inputType.addEventListener("change", this.#toggleElevationField);
  }

  clearInputs() {
    inputDistance.value = "";
    inputDuration.value = "";
    inputCadence.value = "";
    inputElevation.value = "";
  }

  #getPosition() {
    // Implementing geo-location API
    //? accepts 2 parameters: success and error functions
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        this.#loadMap.bind(this),
        function () {
          // error
          alert(`Could not get the current location üó∫Ô∏è`);
        }
      );
    }
  }

  #loadMap(position) {
    // success
    const { latitude } = position.coords;
    const { longitude } = position.coords;
    console.log(
      `https://www.google.com/maps/@${latitude},${longitude},15.5z?entry=ttu`
    );

    //# Implementing Leaflet library
    const coords = [latitude, longitude];
    //? 2nd param in "setView" is the zoom, "map" is special object generated by Leaflet
    this.#map = L.map("map").setView(coords, 13);
    // console.log(map);

    L.tileLayer("https://tile.openstreetmap.org/{z}/{x}/{y}.png", {
      attribution:
        '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
    }).addTo(this.#map);

    //? event handler for pointing on the map, ".on()" comes from Leaflet
    //? mapE = event, handling clicks on the map
    this.#map.on("click", this.#showForm.bind(this));
  }

  #showForm(mapE) {
    this.#mapEvent = mapE;
    form.classList.remove("hidden");
    inputDistance.focus();
  }

  #toggleElevationField() {
    inputElevation.closest(".form__row").classList.toggle("form__row--hidden");
    inputCadence.closest(".form__row").classList.toggle("form__row--hidden");
  }

  #newWorkout(e) {
    e.preventDefault();

    //* Clear input fields
    this.clearInputs();

    //* Display marker
    // console.log(mapEvent);
    const { lat, lng } = this.#mapEvent.latlng;

    //? ".marker" creates; ".addTo" adds to the map; ".bindPopup" creates&binds a popup to the ".marker";
    L.marker([lat, lng])
      .addTo(this.#map)
      .bindPopup(
        L.popup({
          maxWidth: 250,
          minWidth: 100,
          autoClose: false,
          closeOnClick: false,
          className: "running-popup",
        })
      )
      .setPopupContent(`Workout`)
      .openPopup();
  }
}

// creating the object for App class
const app = new App();
